
右手坐标
			y
			.
			.
			.
			.
			.
			.............x
	      .		   
        .
      .
    .
   z
法向量：垂直于面的向量 
角度数据：Math*PI=180°=π：3.1415926...

*******************************************************************************
									webgl
*******************************************************************************














*******************************************************************************
								three.js
*******************************************************************************
在线案例：
https://blog.csdn.net/lin5165352/article/details/89331456
https://scqilin.gitee.io/learning-three.js-third/#chapter-02_06-mesh-properties
//

一	demo说明：
	level01_1.html(引入three.js并测试引入成功。第一个实例，画一个旋转正方体）
	level01_2.html(画一条直线）
	level01_3.html(画多条直线。形成网格）
	level01_4.html(动起来：物体动或照相机（眼睛）动：循环渲染的时候改变物体或照相机的坐标）
	level01_5.html(性能：fps（每秒的帧数）+ms（每帧所用的毫秒）)
	level01_6.html(动画：通过tween.js。达到动画效果，而不是通过改变物体或照相机的坐标）
	level01_7.html(相机：正投影相机/透视相机）
	level01_8.html(光与材质颜色：材质（物体自身颜色）；光（外光颜色）
	level01_9.html（图片与纹理）
	本节演示多个物体；多中光源；综合实例
	）
	
	
	three.js demo
	/html/three/three1.html(给立方体贴图，并让其旋转)
	
	

	
	
	
二， 笔记	
	1、三大组建
	（--在Three.js中，要渲染物体到网页中，我们需要3个组建：场景（scene）、相机（camera）和渲染器（renderer）
	   // 场景（所有图形存在的空间）
	   var scene = new THREE.Scene();  
	   // 透视相机（决定场景中哪个角度的景象显现，相当于一个角度的视觉）
	   var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
	   var renderer = new THREE.WebGLRenderer();   // 渲染器
	   // 设置渲染器的大小为窗口的内宽度，也就是内容区的宽度
	   renderer.setSize(window.innerWidth, window.innerHeight);    
	   document.body.appendChild(renderer.domElement);
	
	实例：（大致原理：通过渲染器渲染成像--而渲染时传入参数是场景和摄像机--场景里早已添加了物体）
	           （思路：新建场景--新建物体放入场景中--新建照相机-- 新建渲染器将已放入物体的场景和相机渲染出来**相机可理解为人的眼睛或某个视角或角度）
	   
	   
	    //场景（所有图形存在的空间）
	   var scene = new THREE.Scene();
	   // 透视相机
        var camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
        // 渲染器
        var renderer = new THREE.WebGLRenderer();
        // 设置渲染器的大小为窗口的内宽度，也就是内容区的宽度
        renderer.setSize(window.innerWidth, window.innerHeight);
      
        document.body.appendChild(renderer.domElement);
        //添加物体到场景中
        var geometry = new THREE.CubeGeometry(1,1,1);//正方体
        var material = new THREE.MeshBasicMaterial({color: 0xf00});
        var cube = new THREE.Mesh(geometry, material); 
        scene.add(cube);//添加到场景
        
        camera.position.z = 5;
        //渲染
        renderer.render(scene, camera);
	
	
	
	2.让物体移动（思路：改变场景中物体的坐标或改变视角（照相机），然后渲染（展现出来，每改变一次渲染一次，形成动态效果））
	         （原理：就是一个不断渲染的过程--循环调用渲染器的render()）
	  function animate() {
		render();
		//requestAnimationFrame函数会在下一个动画帧时会调用animate，达到循环的效果
		requestAnimationFrame( animate );
	  }
	3.性能：fps（每秒的帧数）。ms（每帧使用的毫秒数）***  引入Stats.js
				//此段代码可以写在新建渲染器的函数里
				var stats;
	            stats = new Stats();//stats对象，里面有fps和ms数据
                var obj=$(stats.domElement);//通过stats对象获取dom对象（里面有两个div分别用于放fps和ms），并转换成jq对象
                $("body").prepend(obj);//在界面显示出来
                
                 stats.update();//统计时间和帧数。此函数将当前帧数和ms设置到dom对象中。此代码写在循环渲染函数里（每渲染一次统计一次）

               ** 扩展上诉obj对象获取fps和ms：
          // console.log("当前帧数："+$("#fpsText").html())
           //console.log("当前每帧毫秒数："+$("#fpsText").html())
           
           
    4.照相机详解： 
            -----三大重要设置------
    		1.设置相机位置
    		cube_obj.position.x=-4;
			cube_obj.position.y=4;
			cube_obj.position.z=-4;
			2.设置相机看向哪里：
			camera.lookAt({
                    x : 0,
                    y : 0,
                    z : 0
             });//老版本
			camera.lookAt(0,5,0); //新版本
			3.camera.up.x=0;//up:相机以哪个轴为上方（默认y）
			（前两个设置相当于确定眼睛和物体的位置后，第三个再确定看的角度。）
			
            a.正投影相机（远近景象大小相同，**相当于视角的光线是一系列平行光线）
              :THREE.OrthographicCamera( left, right, top, bottom, near, far )
                ***参数：
                                                    把相机比喻一个照向左边的长方体：上面参数分别是 左平面、右、顶、底、近、远平面相对相机中心点的距离
                	（左平面是长方体靠里面的那一面，右是在屏幕靠近外面（靠近我们的）一面，
                	近平面是左边的一面，远平面是右侧品面
            
            例如：var camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 1, 1000 );
            
            
            b.透视投影相机（物体越远越小,或者反过来说 一个物体要想在你的视角中保持大小不变，离你越远需要越大。**视角光线带有一定角度0-180）
                                  ：THREE.PerspectiveCamera( fov, aspect, near, far )
                 ***参数：
                                          一个相机（视角）展开角度向远看去：展开的空间越来越大（这就是上面说的越远的物体需要越大才能保持在一个视角中大小不变）                 
                 fov:视角展开角度（0度：闭眼，180视角全部展开）；near：你（相机）离近截面距离。
                 far：你（相机）离远截面距离。aspect：实际窗口的宽/高（值越大：你的视角宽度越大）
                 
                 例：var camera = new THREE.PerspectiveCamera( 45, width / height, 1, 1000 );
                      视角展开上下角度为45度，视角的长宽跟当前屏幕一样的比例，近截面距离1，远截面1000。
                    前三个参数基本可确定近截面实际大小和位置。同理124条件可算远截面
                    
                    
                    
                    
                    
                    
     5.光源9
       Var redLight = new THREE.Light("#f00");
       a.//环境光(经多次反侧，无处不在的光，场景中所有物体明暗程度相同）
       	new THREE.AmbientLight("#f00");scene.add( light );
       b.//点光源(光源在一点，参数：光的颜色；光的强度默认1.0即100%强度；光的距离：经过distance距离光的强度变为0的距离，默认0.0表示不衰减）
       	new THREE.PointLight( color, intensity, distance );
       c.//聚光灯（锥形向一点发射。参数：前三同上，angle：锥形角度。exponent：衰减速度，越大衰减越快）
       	new THREE.SpotLight( hex, intensity, distance, angle, exponent )；
       d. //区域光
       new THREE.AreaLight();
       e.//方向光（平行光.参数：颜色；强度）
       new THREE.DirectionalLight("#f00",1);
                      例如     light = new THREE.DirectionalLight("#f00",1);
	     
	           light.position.set(0,0,1); //设置坐标（确定方向，平行光的方向是光的坐标与原点的连接线的方向）
	          	  light.shadow.camera.left = -8;
				  light.shadow.camera.right = 12;
				  light.shadow.camera.far = 50;
				  light.shadow.camera.top = 10;
	  6.纹理（皮肤，将图片映在几何体上）    
			  THREE.Texture( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );
			     参数：
			    1.image图片类型： var image = THREE.ImageUtils.loadTexture(url);// url 是一个http://xxxx/aaa.jpg 的类似地址，
			    2.Mapping：是一个THREE.UVMapping()类型
			    3.wrapS：表示x轴的纹理的回环方式，就是当纹理的宽度小于需要贴图的平面的宽度的时候，平面剩下的部分应该p以何种方式贴图的问题。
				4.wrapT：表示y轴的纹理回环方式。 magFilter和minFilter表示过滤的方式，这是OpenGL的基本概念，我将在下面讲一下，目前你不用担心它的使用。当您不设置的时候，它会取默认值，所以，我们这里暂时不理睬他。
				5.format：表示加载的图片的格式，这个参数可以取值THREE.RGBAFormat，RGBFormat等。THREE.RGBAFormat表示每个像素点要使用四个分量表示，分别是红、绿、蓝、透明来表示。RGBFormat则不使用透明，也就是说纹理不会有透明的效果。
				6.type：表示存储纹理的内存的每一个字节的格式，是有符号，还是没有符号，是整形，还是浮点型。不过这里默认是无符号型（THREE.UnsignedByteType）。暂时就解释到这里，有需要时，我们在仔细分析，或者给作者留言询问。
				7.anisotropy：各向异性过滤。使用各向异性过滤能够使纹理的效果更好，但是会消耗更多的内存、CPU、GPU时间，暂时就了解到这里吧
			  步骤：
			  1.画一个平面
			  	var geometry = new THREE.PlaneGeometry( 500, 300, 1, 1 );//参数：长，款，长划分成几段，款划分成几段（后两者非必须）
			  2.为平面赋予纹理坐标
			    geometry.vertices[0].uv = new THREE.Vector2(0,0);
				
				geometry.vertices[1].uv = new THREE.Vector2(1,0);
				
				geometry.vertices[2].uv = new THREE.Vector2(1,1);
				
				geometry.vertices[3].uv = new THREE.Vector2(0,1);
			  3.加载纹理
				  var texture = THREE.ImageUtils.loadTexture("textures/a.jpg",null,function(t){
			      });
			  4.将纹理应用于材质
			  	var material = new THREE.MeshBasicMaterial({map:texture});
				var mesh = new THREE.Mesh( geometry,material );
				scene.add( mesh );
	   7.将canvas（webgl画图区域）作为纹理。（先画图，然后将所画图（整个canvas）贴到物体上去）
	      
	          
*******************************************************************************
	大致成像原理：
	通过渲染器渲染成像--而渲染时传入参数是场景和摄像机--场景里早已添加了物体）
	 （思路：新建场景--新建物体放入场景中--新建照相机-- 新建渲染器将已放入物体的场景和相机渲染出来**相机可理解为人的眼睛或某个视角或角度）
	
	
	（总结：
	0.新建物体：var geometry = new THREE.Geometry();
	1.新建一个点：new THREE.Vector3( - 500, 0, 0 ) 
	2.向物体中放入点： geometry.vertices.push( new THREE.Vector3( - 500, 0, 0 ) );（geometry.vertices是一个点的集合）
	3.新建一条线（需提供有两个点的物体geometry）：var line = new THREE.Line( geometry, new THREE.LineBasicMaterial( { color: "#f00", opacity: 0.7 } ) );
	4.线条坐标设置：line.position.z = ( i * 50 ) - 500;
	5.场景添加元素：  scene.add(line);
	
	6.相机的坐标的获取与设置（x，y，z）： camera.position.x =camera.position.x +1;
	7.新建相机：
	   a.正投影相机：var camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 1, 1000 );
	   b.透视相机：var camera = new THREE.PerspectiveCamera( 45, width / height, 1, 1000 );
	8.   
	   
	   
	   

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%   WEBGL笔记    %%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

1.常用元素

   ------------------基本元素---------------------------
    a,场景： 
    var scene=new THREE.Scene();//场景
    b，相机：
     var camera=new THREE.PerspectiveCamera(45,
     window.innerWidth/window.innerHeight,0.1,1000);//相机
    c,渲染器：
     var renderer=new THREE.WebGLRenderer();//渲染器 
    d,渲染器加入页面：
	 $("#webgl_output").append(renderer.domElement);
	 
	    //$$$$$$$$$$$$   必要元素详解   $$$$$$$$$$$$$$$$$4
	 //a,场景(scene)详解
	 		//1.获取场景中元素个数：
	 		var nums=scene.children.length;
     //b,相机(camera)详解 
	     	//1.设置相机位置：
		    camera.position.set(200,300,200);
		    //2.设置相机方向(指向的场景对象)：
		    camera.lookAt(scene.position);
		    	或
		    camera.lookAt(new THREE.Vector3(x,y,z));
     //c,渲染器(renderer)详解：
     		 //1.设置渲染器颜色：
		     renderer.setClearColor(0xEEEEEE);
		     //2.设置宽高：
			 renderer.setSize(window.innerWidth,window.innerHeight);
	 
	 
   ------------------其他元素---------------------------
   
    d,光源（加入到场景）：
	  var  spotLight=new THREE.SpotLight(0xffffff); 
	  spotLight.position.set(-40,60,-10);      
	  scene.add(threeObj.spotLight);           
2，物体与材质：
     1.物体（框架）：
      var wuti1=new THREE.PlaneGeometry(60,20,1,1);//平面。参数:长，款，长划分成几段，款划分成几段（后两者非必须）
      var wuti2=new THREE.CubeGeometry(4,4,4);//立方体
      var wuti3=new THREE.SphereGeometry(4,20,20);//球体
     2，材质9：
      	a.基本材质： var caizhi1=new THREE.MeshBasicMaterial({color:0xcccccc});//创建一个基本材质（基础材质不会对光源产生效应）
      	b.亮度材质: var caizhi2=new THREE.MeshLambertMaterial({color:0x7777ff});//可接受光源产生效果。
     	c.法向颜色材质：var meshMaterial = new THREE.MeshNormalMaterial({color: 0x7777ff});//一个物体每一个面颜色都不同（颜色是由某个面，向外指的法向量计算得到的）
     	d.材质数组（网格每个面不同材质）：
		     	var cube=new THREE.CubeGeometry(8,8,8);
				var cube_list = [
					 	new THREE.MeshBasicMaterial({color:"#fff"}),
				        new THREE.MeshBasicMaterial({color:"#f00"}),
				        new THREE.MeshBasicMaterial({color:"#f99"}),
				        new THREE.MeshBasicMaterial({color:"#99f"}),
				        new THREE.MeshBasicMaterial({color:"#4f9"}),
				        new THREE.MeshBasicMaterial({color:"#05f"})
				        ]; 
				 var faceMaterial=new THREE.MeshFaceMaterial(cube_list);
				 var cube_obj =new THREE.Mesh(cube,faceMaterial);
		 e.联合材质（物体同时拥有多个材质）：
				 var cube=new THREE.CubeGeometry(4,4,4);
				 var cube_mesh = [
				        new THREE.MeshLambertMaterial({opacity: 0.8,color:"#f99",transparent:true}),
				        new THREE.MeshBasicMaterial({color:"#f99",wireframe:true}),
				    ]; 
			 	 var cube_obj = THREE.SceneUtils.createMultiMaterialObject(cube,cube_mesh);
					
		 f,图片材质：
			  （*****三点事项：
			     1.html访问必须以服务器访问方式，不可本地访问；
			     2.图片路径：服务器方式；不可绝对路径和相对路径；
			     3.渲染必须动态：requestAnimationFrame(function_name);
			   *****)
					var mapUrl="http://localhost:8080/webgl/image/aa.jpg";//图片路径（必须服务器）
					var map=THREE.ImageUtils.loadTexture(mapUrl);
					 //2.创建一个基础材质，传入纹理映射
					var material=new THREE.MeshBasicMaterial({map:map});
					var geom=new THREE.PlaneGeometry(20,20);//创建一个物体对象
					geom.position.set(0,10,0);
				    var wuti_boj = new THREE.Mesh(geom,material);
					sence.add(wuti_boj);
		 g,线材质(LineBasicMaterial)：
		    //首先，我们声明了一个几何体geometry，如下：
				   var geometry = new THREE.Geometry();
				   //定义一种线条的材质
				   var material = new THREE.LineBasicMaterial( 
						   { linewidth:1,
							   vertexColors: THREE.VertexColors
							   } );
				   //定义2个顶点的位置，并放到几何体geometry中
				    var p1 = new THREE.Vector3( 10,10, 0 );
					var p2 = new THREE.Vector3( -10,10, 0 );
					var p3 = new THREE.Vector3( -10,-10, 0 );
					var p4 = new THREE.Vector3( 10,-10, 0 );
					geometry.vertices.push(p1,p2,p3,p4);//画笔根据点的顺序画线
					//为定义的4个顶点，设置不同的颜色，代码如下所示：
					var color1 = new THREE.Color( 0x444444 ),
						color2 = new THREE.Color( 0xFF0000 );
					geometry.colors.push( color1, color2 ,color1, color2);
					//、定义一条线
					var line = new THREE.Line( geometry, material);
					//将线条放入场景中
					scene.add(line);
					*********** 扩展：  虚线材质    ******************
					（与上面实线相比）变动如下：
					1.LineBasicMateria   换成   LineDashedMaterial
					 var material = new THREE.LineDashedMaterial({
				           vertexColors: true,
				           color: 0xffffff,
				           dashSize: 0.05,
				           gapSize: 0.05,
				           scale: 0.1
				       });
				    2.直线对象调用computeLineDistances();
				    line.computeLineDistances();
     3，网格：给物体添加材质并加入到场景中：
        var wuti_boj = new THREE.Mesh(wuti1,caizhi1);
            //设置物体位置
        	cube_obj.position.x=-4;
			cube_obj.position.y=4;
			cube_obj.position.z=-4;
        scene.add(wuti_boj);//添加物体到场景
3，开始执行：
	添加渲染器到html元素中：$("#webgl_output").append(renderer.domElement);
	传入场景和相机，开始渲染：renderer.render(scene,camera);

4：投影（阴影）效果：
    ------四个要素缺一不可：（场景，物体，平面，光源）都得设置允许阴影效果-----
    //1，场景允许阴影：
	renderer.shadowMapEnabled=true; 
	//3.哪个物体阴影：
	threeObj.cube.castShadow=true;//方块将阴影投射到地面。
	//2. 设置平面能接受到阴影：
	threeObj.plane.receiveShadow=true;
	//4.阴影由哪个光源产生的：
	threeObj.spotLight.castShadow=true;	
5. 材质（material）：获取和设置颜色：
    var color_data=material.color.getStyle();//0x0000ff	
    material.color.setStyle(0x0000ff);//更新颜色,71版本支持此方法
6.物体位置设置（位置9移动9）：
		cubeObj.position.x=-4;
		cubeObj.position.y=4;
		cubeObj.position.z=-4;
	或：
		cubeObj.position.set(0,-10,0);//设置位置
	或：
		wuti_obj.position=new THREE.Vector3(10,3,1);//设置位置
	或：
		wuti_obj.translateX(4);//改变物体位置（相对以前位置的变更，而不是设置物体位置）
7.物体角度设置（角度9）：
	cube_obj.rotation.x+=0.02;
	cube_obj.rotation.y+=0.02;
	cube_obj.rotation.z+=0;  
	或
	cube_obj.rotation.set(0,0.2,0);//修改角度                
8.物体伸缩（比率）（伸缩9）：
    mesh.scale.x = 0.9;
    mesh.scale.y = 0.9;
    mesh.scale.z = 0.9;
         或：
    wuti_boj.scale.set(0.9,0.9,0.9);//设定比例
9.物体转动（参数：角度）（旋转9转动9）：
    mesh.rotateX(0.01);   
    mesh.rotateY(0.01);  
    mesh.rotateZ(0.01);  

10.dat.gui.js(其他说明见图片dat.gui.PNG):
 	//1.创建GUI对象:
    var gui=new dat.GUI();
    //2.添加文件夹
    var folder = gui.addFolder('菜单');
    //3.设置交互界面位置
    gui.domElement.style = 'position:absolute;top:0px;right:0px';
    //4.创建控件对象变量
    var controls={缩放系数: 1, 转速: 0.01,移速:0.1,颜色 : 0x0000ff};
    //5.向gui中添加需要控制的菜单
    folder.addColor(controls, '颜色');//添加颜色菜单选项
    folder.add(controls,'缩放系数',0.1,2.5);//添加缩放系数拖动条菜单选项
    folder.add(controls,'转速',{低速: 0.005, 中速: 0.01,高速: 0.1});//添加转速下拉菜单选项
    folder.add(controls,'移速',0.05,0.2);//添加转速下拉菜单选项
    //6.文件夹folder下面的菜单选项展开显示
    folder.open();
    
    //7.使用gui：（以下值会随gui控件的操作，值的变化而变化）
     var param1=controls.缩放系数;
     var param2=controls.转速
     var param3=controls.颜色
		     例如: mesh.scale.x = controls.缩放系数;//更新缩放系数
		       mesh.rotateY(controls.转速);//更新旋转速度
		       material.color.setStyle(controls.颜色);//更新颜色
11.ASCII效果（文本画 AsciiEffect.js 库，它位于 build/js/effects/AsciiEffect.js。）：
    var effect=new THREE.AsciiEffect(renderer);
    effect.setSize(window.innerWidth,window.innerHeight)
    //修改渲染代码：（renderer.render(scene,camera);)
      	//改为：
      	effect.render(scene,camera);
      	
12,颜色随机：
   var colorobj={color:Math.random()*0xff0000};
13,元素（或物体）操作：
	1.设置元素（例如：物体）的名称   ：方便操作某个物体
		var cube_obj=new THREE.Mesh(cube,cube_mesh);
		cube_obj.name="cube1";
	2.获取（根据物体名称获取）：
		//var obj=scene.getChildByName(name);//根据名称name获取对象（老版本）
		var obj=scene.getObjectByName("cube1");//根据名称name获取对象
		
		var obj_list=scene.children;//获取该场景中所有对象
	3.删除物体
		scene.remove("cube1");
		renderer.render(scene, camera);//删除后一定要从新渲染才能看到效果
14，场景中所有物体调用函数(traverse()方法中传递一个函数，场景中所有物体（e）都会执行该函数)
	function renders(){
		scene.traverse(function(e){
				e.rotation.x+=0;
				e.rotation.y+=0;
				e.rotation.z+=0.01;
		});
		requestAnimationFrame(renders);
		renderer.render(scene, camera);
	}   
15,雾化（给场景中添加雾）
    scene.fog=new THREE.Fog(0xffffff,0.025,80);
	//scene.fog=new THREE.FogExp2(0xffffff,0.015);	   
16,overrideMaterial(场景此属性可设置所有物体为一个材质）
	//所有物体使用一个材质：
	//scene.overrideMaterial=new THREE.MeshLambertMaterial({color:0xffffff});
		   
17，自定义几何体（通过多个三角形组成几何体）
		function zidingyi(){
			//定义一组点
			var vertices=[
				new THREE.Vector3(0,0,0),
				new THREE.Vector3(0,0,10),
				new THREE.Vector3(0,10,0),
				new THREE.Vector3(10,0,0),
				new THREE.Vector3(10,10,0),
				new THREE.Vector3(0,10,10),
				new THREE.Vector3(10,0,10),
				new THREE.Vector3(10,10,10)
			];
			//定义一组面（从点数组中取点生产面：三点生产一面）
			var faces=[
				//1.该实例每两个三角形组成一个正方体平面(传入点数组下标，从0开始)
				//2.传入三个点顺序有规律，否则三角形无法绘制
				//（经研究规律与法向量有关：右手法则（右手四个手指绕点的顺序，大拇指的指向偏向于相机方位才能看到
				//   简单说：从相机的角度三个点必须逆时针！！！！！
				//）
				new THREE.Face3(1,7,5)
				,new THREE.Face3(1,6,7)
			    ,new THREE.Face3(6,7,4)//
				,new THREE.Face3(6,4,3)
				,new THREE.Face3(0,4,2)//
				,new THREE.Face3(0,3,4)
				,new THREE.Face3(1,5,2)//
				,new THREE.Face3(1,2,0)
				,new THREE.Face3(2,5,7)//
				,new THREE.Face3(2,7,4)
				,new THREE.Face3(0,1,6)//
				,new THREE.Face3(0,6,3)
			];
			var geom=new THREE.Geometry();//创建一个物体对象
			geom.vertices=vertices;
			geom.faces=faces;
			geom.computeFaceNormals();
			geom.mergeVertices();
			 var caizhi1=new THREE.MeshBasicMaterial({color:0x999999});//创建一个基本材质（基础材质不会对光源产生效应）
		  	 var caizhi2=new THREE.MeshLambertMaterial({color:0x7777ff});//可接受光源产生效果。
		    var wuti_boj = new THREE.Mesh(geom,caizhi1);
			scene.add(wuti_boj);
		}	
		
		//注意1（除法向量外,两个三角形可能组成两个三角形，也可能组成一个正方形。取决于两个点的顺序）
		    //组成一个正方形（若材质是图片，只用一次，即图片布满正方形）
			var faces1=[
				new THREE.Face3(5,1,7)
				 ,new THREE.Face3(1,6,7)
			];
			//两个三角形（用两遍材质，即两个三角形各自采用一个图片）
			var faces1=[
				new THREE.Face3(7,5,1)
				 ,new THREE.Face3(1,6,7)
			];
		 	var geom=new THREE.PlaneGeometry();//创建一个物体对象
		 	var wuti_boj = new THREE.Mesh(geom,material);
			   
	//***********  拆解网格对象：
		//先定义一个网格
		 var sphereGeometry = new THREE.SphereGeometry(14, 20, 20);
		 var meshMaterial = new THREE.MeshNormalMaterial({color: 0x7777ff});
	     var sphere_obj = new THREE.Mesh(sphereGeometry, meshMaterial);
       //拆解--------
		 var sphere_geometry=sphere_obj.geometry;//获取网格对象框架
		 var face_list=sphere_geometry.faces;//获取物体框架的面（face：每个face由三个点组成）
		 var normal=face_list[0].normal;//获取一个面的法向量
		 var vector3=sphere_geometry.vertices;//获取物体框架的所有点（vertices）
	
	
	
18,添加控制器（鼠标控制视觉：引入：TrackballControls.js）	   
		//添加控制器（初始化方法调用下面方法，并在动画函数中执行（反复执行） controls.update();）
		var controls;
		//添加控制器
        function controls_init(){
            //球形轨道控制器
            controls = new THREE.OrbitControls( camera, renderer.domElement );
            // 如果使用animate方法时，将此函数删除
            //controls.addEventListener( 'change', render );
            // 使动画循环使用时阻尼或自转 意思是否有惯性
            controls.enableDamping = true;
            //动态阻尼系数 就是鼠标拖拽旋转灵敏度
            //controls.dampingFactor = 0.25;
            //是否可以缩放
            controls.enableZoom = true;
            //是否自动旋转
            //controls.autoRotate = true;
            controls.autoRotate = false;
            controls.autoRotateSpeed = 0.5;
            //设置相机距离原点的最近距离
            controls.minDistance  = 1;
            //设置相机距离原点的最远距离
            controls.maxDistance  = 200;
            //是否开启右键拖拽
            controls.enablePan = true;
        }
19,克隆物体（复制物体）
	var wuti_obj2=wuti_obj.clone();
		wuti_obj2.translateX(30);
	    scene.add(wuti_obj2);
20.复制属性：
 	pointLight.position.copy(sphereLightMesh.position);
 	
21 物体显示隐藏（//设置（材质）透明，以及透明度）
	cube_mesh.transparent=true;
	cube_mesh.opacity=0.5;//（0-1）
	//通过材质设置物体不可见：
	cube_mesh.visible=false;
22.创建箭头
	//添加箭头
	function aa_ArrowHelper(){
		var ve3_0=new THREE.Vector3(1,2,0);//决定箭头方向（需要格式化），方向为从0点到该点的方向；
		ve3_0.normalize();//规格化方向向量(转换为长度为1的向量)
		var ve3_1=new THREE.Vector3(1,1,0);//箭头起点
		var arrow=new THREE.ArrowHelper(
				ve3_0,//方向
				ve3_1,//起点
				10,//箭头线的先的长头
				"#f00",//箭头颜色
				4,//箭头的头的长度
				2,//箭头的头的宽度
		);
		scene.add(arrow);
	}

	
////////////////////*******  几何体*********//////////////////
1.二维体（圆面）
				//创建圆：数据说明：Math*PI(π：3.1415926...)
				     var circle=new THREE.CircleGeometry(5,100);//参数：半径；分段（越大越圆）；
				     circle=new THREE.CircleGeometry(5,32,0.8*Math.PI,1*Math.PI);//参数：半径；分段数；起始角（从哪开始画:0-2*π）；圆的大小（画多大：2π表示整个圆）
			    // create a multimaterial
			   		 var circle_obj = THREE.SceneUtils.createMultiMaterialObject(circle,mesh_list);
			    
			    
			    
			    